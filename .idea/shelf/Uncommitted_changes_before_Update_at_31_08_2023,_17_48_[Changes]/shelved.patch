Index: config/data/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.models import User\n\nfrom django.db import models\n\nfrom .exceptions import NoCreditException, NotEnoughFundsException\n\n# Create your models here.\n\n\nclass Bank(models.Model):\n    bank_account = models.IntegerField(default=1000000)\n\n\nclass Shop(models.Model):\n    bank_account = models.IntegerField(default=0)\n\n\nclass Equipment(models.Model):\n    name = models.CharField(max_length=50, blank=False, unique=True)\n    description = models.TextField()\n    price = models.IntegerField(blank=False)\n    availability = models.BooleanField(default=False)\n    shop = models.ForeignKey(Shop, on_delete=models.CASCADE)\n\n\nclass Minigame(models.Model):\n    name = models.CharField(max_length=50, blank=False, unique=True)\n    description = models.TextField(blank=False)\n    result = models.IntegerField(default=0)\n\n\nclass Player(models.Model):\n    genders = (\n        ('Male', 'Мужчина'),\n        ('Female', 'Женщина'),\n        (None, 'Не указан')\n    )\n\n    name = models.CharField(max_length=20, blank=False, unique=True)\n    gender = models.CharField(max_length=9, choices=genders, default=None)\n    own_money = models.IntegerField(default=1000)\n    credit = models.IntegerField(default=0)\n    bank = models.ForeignKey(Bank, on_delete=models.CASCADE, default=1)\n    shop = models.ForeignKey(Shop, on_delete=models.CASCADE, default=1)\n    equipment = models.ManyToManyField(Equipment, through='PlayerEquipment')\n    minigame = models.ManyToManyField(Minigame, through='PlayerMinigame')\n\n    def get_credit(self, credit_amount=5000):\n        bank = Bank.objects.get(id=1)\n        bank.bank_account -= credit_amount\n        bank.save()\n        self.credit += credit_amount\n        self.own_money += credit_amount\n        self.save()\n\n\n    def return_credit(self):\n        if self.credit:\n            if self.own_money >= self.credit:\n                bank = Bank.objects.get(id=1)\n                bank.bank_account += self.credit\n                self.own_money -= self.credit\n                self.credit = 0\n            else:\n                raise NoCreditException('На вашем счёте недостаточно средств!')\n            bank.save()\n            self.save()\n        else:\n            raise NotEnoughFundsException('У вас нет кредита!')\n\n\nclass PlayerEquipment(models.Model):\n    player = models.ForeignKey(Player, on_delete=models.CASCADE)\n    equipment = models.ForeignKey(Equipment, on_delete=models.CASCADE)\n\n\nclass PlayerMinigame(models.Model):\n    player = models.ForeignKey(Player, on_delete=models.CASCADE)\n    minigame = models.ForeignKey(Minigame, on_delete=models.CASCADE)\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/config/data/models.py b/config/data/models.py
--- a/config/data/models.py	(revision c98358abc2ee22b7947c5f9c4c60df918f9f8e89)
+++ b/config/data/models.py	(date 1693489213267)
@@ -53,7 +53,6 @@
         self.own_money += credit_amount
         self.save()
 
-
     def return_credit(self):
         if self.credit:
             if self.own_money >= self.credit:
